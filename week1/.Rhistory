# get count mat back
cleaned = decont_obj@assays@data@listData$decont
write.csv(cleaned, 'cleaned.csv')
VisualizeHeatmap(decont_obj,rownames(mbrain_raw)[1])
dirty = mbrain_obj@assays@data@listData$raw
write.csv(dirty, 'dirty.csv')
dirty_filtered = read.csv('dirty_filtered.csv',check.names=F,row.names = 1)
dirty_filtered = read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/dirty_filtered.csv',check.names=F,row.names = 1)
View(dirty_filtered)
dirty_filtered = as(as.matrix(dirty_filtered), "dgCMatrix")
dirty_filtered_obj <- CreateSlide(count_mat = dirty_filtered,
slide_info = slide_info)
# data(mbrain_slide_info)
# mbrain_obj_c <- CreateSlide(count_mat = mbrain_raw,
#                           slide_info = mbrain_slide_info)
# VisualizeSlide(slide_obj = mbrain_obj)
# VisualizeHeatmap(mbrain_obj,rownames(mbrain_raw)[1])
# decont_obj <- SpotClean(mbrain_obj)
# VisualizeHeatmap(decont_obj,rownames(mbrain_raw)[1])
# VisualizeHeatmap(decont_obj,decont_obj@metadata$contamination_rate,
#                  logged = FALSE, legend_title = "contamination rate",
#                  legend_range = c(0,1))
raw_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/raw_feature_bc_matrix")
slide_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/spatial/tissue_positions_list.csv")
mbrain_obj <- CreateSlide(count_mat = raw_mat[rownames(mbrain_raw),],
slide_info = slide_info)
VisualizeHeatmap(mbrain_obj,rownames(mbrain_raw)[1])
decont_obj <- SpotClean(mbrain_obj)
dirty_filtered = read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/dirty_filtered.csv',check.names=F,row.names = 1)
dirty_filtered = as(as.matrix(dirty_filtered), "dgCMatrix")
# data(mbrain_slide_info)
# mbrain_obj_c <- CreateSlide(count_mat = mbrain_raw,
#                           slide_info = mbrain_slide_info)
# VisualizeSlide(slide_obj = mbrain_obj)
# VisualizeHeatmap(mbrain_obj,rownames(mbrain_raw)[1])
# decont_obj <- SpotClean(mbrain_obj)
# VisualizeHeatmap(decont_obj,rownames(mbrain_raw)[1])
# VisualizeHeatmap(decont_obj,decont_obj@metadata$contamination_rate,
#                  logged = FALSE, legend_title = "contamination rate",
#                  legend_range = c(0,1))
raw_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/raw_feature_bc_matrix")
slide_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/spatial/tissue_positions_list.csv")
mbrain_obj <- CreateSlide(count_mat = raw_mat[rownames(mbrain_raw),],
slide_info = slide_info)
VisualizeHeatmap(mbrain_obj,rownames(mbrain_raw)[1])
decont_obj <- SpotClean(mbrain_obj)
# get count mat back
cleaned_2 = decont_obj@assays@data@listData$decont
write.csv(cleaned_2, 'cleaned.csv')
slide_info_filtered = Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/positions_list_filtered.csv")
dirty_filtered_obj <- CreateSlide(count_mat = dirty_filtered,
slide_info = slide_info_filtered)
View(slide_info_filtered)
View(slide_info)
View(dirty_filtered)
View(raw_mat)
View(dirty)
View(dirty)
dirty = data.frame(mbrain_obj@assays@data@listData$raw, check.names = True)
dirty = data.frame(mbrain_obj@assays@data@listData$raw, check.names = T)
View(dirty)
dirty = mbrain_obj@assays@data@listData$raw
View(dirty)
dirty_filtered = read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/dirty_filtered.csv',check.names=F,row.names = 1)
dirty_filtered = as(as.matrix(dirty_filtered), "dgCMatrix")
slide_info_filtered = Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/positions_list_filtered.csv")
dirty_filtered_obj <- CreateSlide(count_mat = dirty_filtered,
slide_info = slide_info_filtered)
decont_obj_filtered <- SpotClean(dirty_filtered_obj)
library(SpotClean)
raw_mat <- read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/A1_counts.csv',check.names=F,row.names = 1)
raw_mat = as(as.matrix(raw_mat), "dgCMatrix")
View(raw_mat)
slide_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/spatial/A1_tissue_positions_list_named.csv")
slide_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/A1_tissue_positions_list_named.csv")
View(slide_info)
slide_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/spatial/tissue_positions_list.csv")
View(slide_info)
zebrafish_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/A1_tissue_positions_list_named.csv")
View(zebrafish_info)
View(zebrafish_info)
zebrafish_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/A1_tissue_positions_list_filtered.csv")
mbrain_obj <- CreateSlide(count_mat = raw_mat[rownames(mbrain_raw),],
slide_info = slide_info)
mbrain_obj <- CreateSlide(count_mat = raw_mat[rownames(mbrain_raw),],
slide_info = zebrafish_info)
mbrain_obj <- CreateSlide(count_mat = raw_mat,
slide_info = zebrafish_info)
View(raw_mat)
library(SpotClean)
raw_mat <- read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/A1_counts.csv',check.names=F,row.names = 1)
raw_mat = as(as.matrix(raw_mat), "dgCMatrix")
zebrafish_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/A1_tissue_positions_list_filtered.csv")
mbrain_obj <- CreateSlide(count_mat = raw_mat,
slide_info = zebrafish_info)
View(raw_mat)
View(zebrafish_info)
zebrafish_mat <- read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/A1_counts.csv',check.names=F,row.names = 1)
zebrafish_mat = as(as.matrix(zebrafish_mat), "dgCMatrix")
View(zebrafish_mat)
# data(mbrain_slide_info)
# mbrain_obj_c <- CreateSlide(count_mat = mbrain_raw,
#                           slide_info = mbrain_slide_info)
# VisualizeSlide(slide_obj = mbrain_obj)
# VisualizeHeatmap(mbrain_obj,rownames(mbrain_raw)[1])
# decont_obj <- SpotClean(mbrain_obj)
# VisualizeHeatmap(decont_obj,rownames(mbrain_raw)[1])
# VisualizeHeatmap(decont_obj,decont_obj@metadata$contamination_rate,
#                  logged = FALSE, legend_title = "contamination rate",
#                  legend_range = c(0,1))
raw_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/raw_feature_bc_matrix")
slide_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/Spotclean/spatial/tissue_positions_list.csv")
View(raw_mat)
View(zebrafish_mat)
zebrafish_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/filtered_feature_bc_matrix")
zebrafish_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial//tissue_positions_list.csv",
tissue_img_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial//tissue_lowres_image.png",
scale_factor_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial//scalefactors_json.json")
mbrain_obj <- CreateSlide(count_mat = zebrafish_mat,
slide_info = zebrafish_info)
View(raw_mat)
View(zebrafish_info)
library(SpotClean)
zebrafish_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/filtered_feature_bc_matrix")
zebrafish_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial//tissue_positions_list.csv",
tissue_img_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial//tissue_lowres_image.png",
scale_factor_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial//scalefactors_json.json")
mbrain_obj <- CreateSlide(count_mat = zebrafish_mat,
slide_info = zebrafish_info)
zebrafish_mat@Dimnames[2]
zebrafish_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial/tissue_positions_list.csv",
tissue_img_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial/tissue_lowres_image.png",
scale_factor_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial/scalefactors_json.json")
mbrain_obj <- CreateSlide(count_mat = zebrafish_mat,
slide_info = zebrafish_info)
where(zebrafish_mat@Dimnames[2] == 'ACGCCTGACACGCGCT-1')
which(zebrafish_mat@Dimnames[2] == 'ACGCCTGACACGCGCT-1')
zebrafish_info$slide$barcode
zebrafish_mat@Dimnames[2][1]
zebrafish_mat@Dimnames
zebrafish_mat@Dimnames[[2]]
zebrafish_mat@Dimnames[[2]][1]
zebrafish_info$slide$barcode[1]
which(zebrafish_mat@Dimnames[[2]][1] == zebrafish_info$slide$barcode[1])
zebrafish_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/raw_feature_bc_matrix")
zebrafish_info <- Read10xSlide(tissue_csv_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial/tissue_positions_list.csv",
tissue_img_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial/tissue_lowres_image.png",
scale_factor_file="/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/spatial/scalefactors_json.json")
mbrain_obj <- CreateSlide(count_mat = zebrafish_mat,
slide_info = zebrafish_info)
VisualizeHeatmap(mbrain_obj,rownames(mbrain_raw)[1])
VisualizeHeatmap(mbrain_obj,rownames(zebrafish_mat)[1])
VisualizeHeatmap(mbrain_obj,rownames(zebrafish_mat)[2])
rownames(zebrafish_mat)
View(mbrain_obj)
which(rownames(zebrafish_mat) == 'BrafHuman')
which(rownames(zebrafish_mat) == 'Braf')
which(rownames(zebrafish_mat) == 'braf')
which(rownames(zebrafish_mat) == 'BRAFhuman')
VisualizeHeatmap(mbrain_obj,'BRAFhuman')
decont_obj <- SpotClean(mbrain_obj)
VisualizeHeatmap(decont_obj,'BRAFhuman')
VisualizeHeatmap(mbrain_obj,'zbed4')
VisualizeHeatmap(mbrain_obj,'tkb1')
VisualizeHeatmap(mbrain_obj,'tbk1')
VisualizeHeatmap(decont_obj,'tbk1')
zebrafish_sim_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/raw_feature_bc_matrix_sim")
zebrafish_sim_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/raw_feature_bc_matrix_sim")
zebrafish_sim_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/raw_feature_bc_matrix_sim")
zebrafish_sim_mat <- Read10xRaw(count_dir = "/Users/hrzhang/Dropbox/A1_spaceranger_output/A1_spaceranger_output/raw_feature_bc_matrix_sim")
sim_obj <- CreateSlide(count_mat = zebrafish_sim_mat,
slide_info = zebrafish_info)
VisualizeHeatmap(mbrain_obj,'zbed4')
VisualizeHeatmap(mbrain_obj,'BRAFhuman')
VisualizeHeatmap(sim_obj,'BRAFhuman')
VisualizeHeatmap(mbrain_obj,'tbk1')
VisualizeHeatmap(sim_obj,'tbk1')
decont_sim_obj <- SpotClean(sim_obj)
VisualizeHeatmap(decont_sim_obj,'BRAFhuman')
VisualizeHeatmap(sim_obj,'BRAFhuman')
VisualizeHeatmap(decont_sim_obj,'BRAFhuman')
cleaned_2 = decont_obj@assays@data@listData$decont['BRAFhuman']
sim_obj@assays@data@listData$decont['BRAFhuman']
sim_obj@assays@data@listData$decont
decont_sim_obj@assays@data@listData$decont
decont_sim_obj@assays@data@listData$decont['BRAFhuman']
sim_obj@assays@data@listData$raw@Dimnames[1]
which(sim_obj@assays@data@listData$raw@Dimnames[1] == 'BRAFhuman')
which(sim_obj@assays@data@listData$raw@Dimnames[1] == "BRAFhuman")
which(sim_obj@assays@data@listData$raw@Dimnames[1] == "tbk1")
which(sim_obj@assays@data@listData$raw@Dimnames[1], "tbk1")
which(sim_obj@assays@data@listData$raw@Dimnames[[1]] == "tbk1")
which(sim_obj@assays@data@listData$raw@Dimnames[[1]] == "BRAFhuman")
decont_sim_obj@assays@data@listData$decont[5237]
decont_sim_obj@assays@data@listData$decont[, 5237]
decont_sim_obj@assays@data@listData$decont
full_mat = as.matrix(decont_sim_obj@assays@data@listData$decont)
which(sim_obj@assays@data@listData$raw@Dimnames[[1]] == "BRAFhuman")
full_mat[5237]
dim(full_mat)
full_mat[5237, ]
full_mat = as.matrix(decont_sim_obj@assays@data@listData$decont)[5237, ]
write.csv(full_mat, 'braf_sim_spotclean.csv')
row_sim = decont_sim_obj@metadata$slide$row
col_sim = decont_sim_obj@metadata$slide$col
write.csv(row_sim, 'row_sim.csv')
write.csv(col_sim, 'col_sim.csv')
spatstat::ppp
library(spatstat)
spatstat::ppp
library(data.table)
library(trendsceek)
counts <- t(read.table("/Users/hrzhang/Downloads/Layer2_BC_count_matrix-1.tsv", check.names = F))
rawcount = read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/semisynthetic_spatial_spark.csv',check.names=F,row.names = 1)
rawcount <-as.matrix(rawcount)
## Filter genes on being expressed
min.ncells.expr = 3
min.expr = 5
counts_filt = genefilter_exprmat(rawcount, min.expr, min.ncells.expr)
dim(counts_filt)
## Calculate gene variability stats
quantile.cutoff = 0.9  ## filter out the most lowly expressed genes from the fitting
method = "rlm"
vargenes_stats = calc_varstats(counts_filt, counts_filt, quant.cutoff = quantile.cutoff,
method = method)
## Select subset with the top-ranked most variable genes
n.topvar = 300
topvar.genes = rownames(vargenes_stats[["real.stats"]])[1:n.topvar]
topvar.genes
## Subset normalized counts on the most variable genes
counts_sub = counts_filt[topvar.genes, ]
dim(counts_sub)
## Create point-pattern using positions as spatial distribution and
## expression levels as mark distribution
cn <- colnames(counts_sub)
xy <- matrix(as.numeric(do.call(rbind, strsplit(cn, split = "x"))), ncol = 2)
pp <- pos2pp(xy)
detach("package:spatstat", unload = TRUE)
library(spatstat)
pp <- pos2pp(xy)
library('SPARK')
# load("/Users/hrzhang/Downloads/Layer2_BC_Count.rds")
library(data.table)
rawcount = read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/semisynthetic_spatial_spark.csv',check.names=F,row.names = 1)
info <- cbind.data.frame(x=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",1)),
y=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",2)),
total_counts=apply(rawcount,2,sum))
rownames(info) <- colnames(rawcount)
spark <- CreateSPARKObject(counts=rawcount,
location=info[,1:2],
percentage = 0.1,
min_total_counts = 10)
spark@lib_size <- apply(spark@counts, 2, sum)
spark <- spark.vc(spark,
covariates = NULL,
lib_size = spark@lib_size,
num_core = 5,
verbose = T)
spark <- spark.test(spark,
check_positive = T,
verbose = F)
head(spark@res_mtest[,c("combined_pvalue","adjusted_pvalue")])
LMReg <- function(ct, T) {
return(lm(ct ~ T)$residuals)
}
counts <- spark@counts
info <- spark@location
vst_count <- var_stabilize(counts) # R function in funcs.R
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(grid)
library(reshape2)
## anscombe variance stabilizing transformation: NB
var_stabilize <- function(x, sv = 1) {
varx = apply(x, 1, var)
meanx = apply(x, 1, mean)
phi = coef(nls(varx ~ meanx + phi * meanx^2, start = list(phi = sv)))
return(log(x + 1/(2 * phi)))
}# end func
relative_func <- function(expres) {
maxd = max(expres) - min(expres)
rexpr = (expres - min(expres))/maxd
return(rexpr)
}# end func
##-----------------------------------------------------------------
## for data frame
pattern_plot2 <- function(pltdat, igene, xy = T, main = F, titlesize = 2,
pointsize = 3, xpand = 0, ypand = 1, title = NULL) {
if (!xy) {
xy <- matrix(as.numeric(do.call(rbind, strsplit(as.character(pltdat[,
1]), split = "x"))), ncol = 2)
rownames(xy) <- as.character(pltdat[, 1])
colnames(xy) <- c("x", "y")
pd <- cbind.data.frame(xy, pltdat[, 2:ncol(pltdat)])
} else {
pd <- pltdat
}
# pal <- colorRampPalette(c('seagreen1','orangered')) pal <-
# colorRampPalette(c('#00274c','#ffcb05')) pal <-
# colorRampPalette(c('deepskyblue','goldenrod1')) pal <-
# colorRampPalette(c('deepskyblue','deeppink'))
pal <- colorRampPalette(c("mediumseagreen", "lightyellow2", "deeppink"))
gpt <- ggplot(pd, aes(x = x, y = y, color = pd[, igene + 2])) + geom_point(size = pointsize) +
# scale_color_gradientn(colours=pal(5))+
scale_color_gradientn(colours = pal(5)) + scale_x_discrete(expand = c(xpand,
ypand)) + scale_y_discrete(expand = c(xpand, ypand)) + coord_equal() +
# labs(title = colnames(pd)[igene+2], x = NULL, y = NULL)+
theme_bw()
if (main) {
if (is.null(title)) {
title = colnames(pd)[igene + 2]
}
out = gpt + labs(title = title, x = NULL, y = NULL) + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, size = rel(titlesize)))
} else {
out = gpt + labs(title = NULL, x = NULL, y = NULL) + theme(legend.position = "none")
}
return(out)
}
##-----------------------------------------------------------------
## no requirement on equal coordinates and provide additional space on
## xy
pattern_plot3 <- function(pltdat, igene, xy = T, main = F, titlesize = 2,
pointsize = 3, min.pand = 0.99, max.pand = 1.01, title = NULL) {
if (!xy) {
xy <- matrix(as.numeric(do.call(rbind, strsplit(as.character(pltdat[,
1]), split = "x"))), ncol = 2)
rownames(xy) <- as.character(pltdat[, 1])
colnames(xy) <- c("x", "y")
pd <- cbind.data.frame(xy, pltdat[, 2:ncol(pltdat)])
} else {
pd <- pltdat
}
pal <- colorRampPalette(c("mediumseagreen", "lightyellow2", "deeppink"))
gpt <- ggplot(pd, aes(x = x, y = y, color = pd[, igene + 2])) + geom_point(size = pointsize) +
scale_color_gradientn(colours = pal(5)) + scale_x_discrete(expand = c(0,
1)) + scale_y_discrete(expand = c(0, 1)) + expand_limits(x = c(min(pd$x) *
min.pand, max(pd$x) * max.pand), y = c(min(pd$y) * min.pand, max(pd$y) *
max.pand)) + theme_bw()
if (main) {
if (is.null(title)) {
title = colnames(pd)[igene + 2]
}
out = gpt + labs(title = title, x = NULL, y = NULL) + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, size = rel(titlesize)))
} else {
out = gpt + labs(title = NULL, x = NULL, y = NULL) + theme(legend.position = "none")
}
return(out)
}
vst_count <- var_stabilize(counts) # R function in funcs.R
sig_vst_count <- vst_count[which(spark@res_mtest$adjusted_pvalue < 0.05),
]
sig_vst_res <- t(apply(sig_vst_count, 1, LMReg, T = log(spark@lib_size)))
library(amap)
hc <- hcluster(sig_vst_res, method = "euc", link = "ward", nbproc = 1,
doubleprecision = TRUE)
numC <- 10
memb <- cutree(hc, k = numC)
cent <- NULL
for (k in 1:numC) {
cent <- cbind(cent, colMeans(sig_vst_res[memb == k, , drop = FALSE]))
}
position_cord <- info[, 1:2]
rownames(position_cord) <- rownames(cent)
rel_cent <- t(apply(cent, 1, relative_func))
pd <- setNames(cbind.data.frame(position_cord, rel_cent), c("x", "y", paste0("Pattern", c('I','II','III','IV','V'))))
write.csv(pd, 'Spark_pattern.csv')
vst_ct <- var_stabilize(t(rawcount)) # R function in funcs.R
gene_plot <- c("gene_1",  "gene_10",  "gene_14",  "gene_25",  "gene_45",  "gene_48",
"gene_50",  "gene_79",  "gene_86",  "gene_89",  "gene_96",  "gene_99",
"gene_100", "gene_101", "gene_126", "gene_136", "gene_137", "gene_152",
"gene_207", "gene_266", "gene_340", "gene_352", "gene_388", "gene_421",
"gene_458", "gene_515", "gene_766", "gene_769")
gene_plot <- c("gene_23",  "gene_25",  "gene_34",  "gene_12",  "gene_51",  "gene_89",
"gene_16",  "gene_17",  "gene_44",  "gene_15",  "gene_59",  "gene_61",
"gene_53", "gene_101", "gene_110", "gene_85", "gene_151", "gene_127",
"gene_67", "gene_159", "gene_991", "gene_455", "gene_402", "gene_626",
"gene_301", "gene_997", "gene_237", "gene_727", "gene_203", "gene_773")
sig_vst_ct <- vst_ct[,gene_plot]
rel_vst_ct <- apply(sig_vst_ct, 1, relative_func)
dim(info[,1:2])
dim(rel_vst_ct)
pltdat <- cbind.data.frame(info[,1:2],t(rel_vst_ct))
write.csv(pltdat, 'Spark_plot_data.csv')
write.csv(pltdat, 'Spark_plot.csv')
library('SPARK')
# load("/Users/hrzhang/Downloads/Layer2_BC_Count.rds")
library(data.table)
rawcount = read.csv('/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/semisynthetic_spatial_spark.csv',check.names=F,row.names = 1)
info <- cbind.data.frame(x=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",1)),
y=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",2)),
total_counts=apply(rawcount,2,sum))
rownames(info) <- colnames(rawcount)
spark <- CreateSPARKObject(counts=rawcount,
location=info[,1:2],
percentage = 0.1,
min_total_counts = 10)
spark@lib_size <- apply(spark@counts, 2, sum)
spark <- spark.vc(spark,
covariates = NULL,
lib_size = spark@lib_size,
num_core = 5,
verbose = T)
spark <- spark.test(spark,
check_positive = T,
verbose = F)
head(spark@res_mtest[,c("combined_pvalue","adjusted_pvalue")])
vst_ct <- var_stabilize(t(rawcount)) # R function in funcs.R
gene_plot <- c("gene_23",  "gene_25",  "gene_34",  "gene_12",  "gene_51",  "gene_89",
"gene_16",  "gene_17",  "gene_44",  "gene_15",  "gene_59",  "gene_61",
"gene_53", "gene_101", "gene_110", "gene_85", "gene_151", "gene_127",
"gene_67", "gene_159", "gene_991", "gene_455", "gene_402", "gene_626",
"gene_301", "gene_997", "gene_237", "gene_727", "gene_203", "gene_773")
sig_vst_ct <- vst_ct[,gene_plot]
rel_vst_ct <- apply(sig_vst_ct, 1, relative_func)
dim(info[,1:2])
dim(rel_vst_ct)
pltdat <- cbind.data.frame(info[,1:2],t(rel_vst_ct))
write.csv(pltdat, 'Spark_plot.csv')
LMReg <- function(ct, T) {
return(lm(ct ~ T)$residuals)
}
counts <- spark@counts
info <- spark@location
vst_count <- var_stabilize(counts) # R function in funcs.R
sig_vst_count <- vst_count[which(spark@res_mtest$adjusted_pvalue < 0.05),
]
sig_vst_res <- t(apply(sig_vst_count, 1, LMReg, T = log(spark@lib_size)))
library(amap)
hc <- hcluster(sig_vst_res, method = "euc", link = "ward", nbproc = 1,
doubleprecision = TRUE)
numC <- 10
memb <- cutree(hc, k = numC)
cent <- NULL
for (k in 1:numC) {
cent <- cbind(cent, colMeans(sig_vst_res[memb == k, , drop = FALSE]))
}
position_cord <- info[, 1:2]
rownames(position_cord) <- rownames(cent)
rel_cent <- t(apply(cent, 1, relative_func))
pd <- setNames(cbind.data.frame(position_cord, rel_cent), c("x", "y", paste0("Pattern", c('I','II','III','IV','V'))))
write.csv(pd, 'Spark_pattern.csv')
rowData_semisyn <- read.csv("/Volumes/Conerstone/SGE/semisyn.rowData.csv", stringsAsFactors=FALSE)
colData_semisyn <- read.csv("/Volumes/Conerstone/SGE/semisyn.colData.csv", stringsAsFactors=FALSE, row.names=1)
counts_semisyn <- read.csv("/Volumes/Conerstone/SGE/semisyn.counts.csv.gz", row.names=1, check.names=F, stringsAsFactors=FALSE)
top = rev(order(apply(log(1 + data.matrix(counts_semisyn)), 1, sd)))
semisyn_obs = data.matrix(counts_semisyn)
dim(semisyn_obs)
dim(data.matrix(semisyn_obs))
counts <- cleanCounts(counts = semisyn_obs,
min.lib.size = 100,
min.reads = 1,
min.detected = 1)
library(STdeconvolve)
counts <- cleanCounts(counts = semisyn_obs,
min.lib.size = 100,
min.reads = 1,
min.detected = 1)
corpus <- restrictCorpus(counts,
removeAbove=1.0,
removeBelow = 0.05,
alpha = 0.05,
plot = TRUE,
verbose = TRUE)
corpus@Dimnames[1]
ldas <- fitLDA(t(as.matrix(corpus)), Ks = seq(2, 8, by = 1), plot=TRUE, verbose=TRUE)
optLDA <- optimalModel(models = ldas, opt = 4)
results <- getBetaTheta(optLDA, corpus = t(as.matrix(corpus)))
deconProp <- results$theta
deconGexp <- results$beta*1000
deconProp
write.csv(deconProp, '/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/stdeconvolve_semisyn_4_new_fit.csv')
write.csv(deconGexp, '/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/stdeconvolve_semisyn__gexp_new_fit.csv')
orgs <- read.csv("organisms_genes.tsv", sep='\t')
setwd("~/Desktop/compbio/week1")
orgs <- read.csv("organisms_genes.tsv", sep='\t')
View(orgs)
head(orgs)
table(orgs$type)
library(ggplot2)
ggplot(orgs, aes(bp, coding, color=type)) +
geom_point(size=3)
orgs[which.max(orgs$bp),]
orgs_filter <- orgs[orgs$name != "Wheat",]
ggplot(orgs_filter, aes(bp, coding, color=type)) +
geom_point(size=3)
orgs$log_bp <- log10(orgs$bp)
orgs$log_coding <- log10(orgs$coding)
ggplot(orgs, aes(log_bp, log_coding, color=type)) +
geom_point(size=3)
orgs <- orgs %>% mutate(log_bp = log10(bp),
log_coding = log10(coding))
library(dplyr)
orgs <- orgs %>% mutate(log_bp = log10(bp),
log_coding = log10(coding))
orgs <- orgs %>% mutate(genes = coding + noncoding)
orgs %>%
group_by(type) %>%
summarize(n=n(),
cr.avg=mean(coding/genes),
cr.sd=sd(coding/genes))
orgs_filter %>%
group_by(type) %>%
summarize(basepairs=median(bp),
min=min(bp),
max=max(bp)) %>%
ggplot(aes(type, basepairs, ymin=min, ymax=max)) +
geom_pointrange()
ggplot(orgs_filter, aes(bp, coding, col=type)) +
geom_point() + geom_smooth(se=FALSE, method="lm")
