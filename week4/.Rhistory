clinical_json <- fromJSON("/Users/hrzhang/Downloads/cases.2022-02-28.json")
df <- unnest(clinical_json, cols=diagnoses)
sum((df$age_at_diagnosis > 365*45) & (df$demographic$gender == 'male') &
(df$demographic$vital_status == 'Alive'))
#2
avg_age_at_diag <- mean(na.omit(df$age_at_diagnosis))
avg_age_at_diag_h <- avg_age_at_diag/365
#3
library(limma)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
gbm_data <- read.delim("~/Downloads/GBM_expression_data.txt", header=FALSE)
design = cbind(Grp1 = 1, Grp2vs1 = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1))
View(design)
gbm_data = gbm_data[2:71]
y = slice_tail(gbm_data, n = 12042)
View(gbm_data)
View(exp)
View(gbm_data)
gbm_data <- read.delim("~/Downloads/GBM_expression_data.txt", header=FALSE)
design = cbind(Grp1 = 1, Grp2vs1 = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1))
gbm_data = gbm_data[2:71]
y = slice_tail(gbm_data, n = 12042)
View(y)
View(exp)
mutate_all(y, function(x) as.numeric(as.character(x)))
df2 <- mutate_all(y, function(x) as.numeric(as.character(x)))
View(df2)
View(y)
fit = lmFit(df2, design)
ebays = eBayes(fit)
x = topTable(ebays, coef = "Grp2vs1", adjust = "BH")
View(x)
ebays = treat(ebays, lfc = 1.5)
topTreat(ebays, coef = 2)
count = ebays$p.value <= 0.05
View(count)
a = table(count)
View(x)
library(affy)
BiocManager::install("affy")
eset <- justRMA(filenames = targets$FileName)
library(affy)
eset <- justRMA(filenames = targets$FileName)
targets <- readTargets("~/Downloads/targets.txt")
targets <- readTargets("~/Downloads/ecoli-lrp/targets.txt")
Exp <- factor(targets$Experiment)
Strain <- factor(targets$Strain, levels=c("lrp+","lrp-"))
View(targets)
design <- model.matrix(~Exp+Strain)
View(design)
c(0, 0, 0) + c(1, 1)
~Exp+Strain
~Exp
Exp+Strain
c(c(0, 0, 0), c(1, 1))
c(rep(1, 61), c(1, 10))
c(rep(1, 61), rep(2, 10))
sample <- c(rep(1, 61), rep(2, 10))
sample <- c(rep(1, 60), rep(2, 10))
design <- model.matrix(~0+sample)
View(design)
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~0+sample)
View(design)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
results <- decideTests(fit)
summary(results)
View(fit)
fit[["coefficients"]]
sample2
topTable(fit, coef="sample2", n=30)
View(exp)
design <- model.matrix(~1+sample)
View(df)
View(design)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
results <- decideTests(fit)
summary(results)
topTable(fit, coef="sample2", n=30)
fit <- treat(fit, lfc=log2(1.5))
results <- decideTests(fit)
summary(results)
topTable(fit, coef="sample2", n=30)
View(fit)
summary(results)
topTable(fit, coef="sample2")
topTreat(fit, coef=ncol(design))
library(jsonlite)
library(tidyr)
#1
clinical_json <- fromJSON("/Users/hrzhang/Downloads/cases.2022-02-28.json")
df <- unnest(clinical_json, cols=diagnoses)
sum((df$age_at_diagnosis > 365*45) & (df$demographic$gender == 'male') &
(df$demographic$vital_status == 'Alive'))
#2
avg_age_at_diag <- mean(na.omit(df$age_at_diagnosis))
avg_age_at_diag_h <- avg_age_at_diag/365
#3
library(limma)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=log2(1.5))
results <- decideTests(fit)
summary(results)
topTreat(fit, coef=ncol(design))
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit)
summary(results)
topTreat(fit, coef=ncol(design))
topTreat(fit, coef=ncol(design), n=100)
topTreat(fit, coef=ncol(design), n=100)
fit <- treat(fit, lfc=log2(1.5))
results <- decideTests(fit)
summary(results)
topTreat(fit, coef=ncol(design), n=100)
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit)
summary(results)
topTreat(fit, coef=ncol(design), n=100)
summary(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
topTable(fit, p.value = 0.05, lfc = 1.5, number = 12042)
diff_genes <- topTable(fit, p.value = 0.05, lfc = 1.5, number = 12042)
fit <- treat(fit, lfc=1.5, p.value=0.05)
View(fit)
results <- decideTests(fit, adjust.method="BH", p.value=0.05, lfc=0)
summary(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
results <- decideTests(fit, adjust.method="BH", p.value=0.05, lfc=0)
summary(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit)
summary(results)
results <- decideTests(fit, p.value=0.05, lfc=0)
summary(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
results <- decideTests(fit, p.value=0.05, lfc=1.5)
summary(results)
fit <- treat(fit, lfc=1.5)
summary(results)
results <- decideTests(fit, p.value=0.05, lfc=1.5)
summary(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
results <- decideTests(fit, adjust.method="BH", p.value=0.05, lfc=1.5)
summary(results)
results <- decideTests(fit, adjust.method="BH", p.adjust=0.05, lfc=1.5)
summary(results)
results <- topTreat(fit, adjust.method="BH", p.adjust=0.05, lfc=1.5)
results <- topTreat(fit, adjust.method="BH", p.value=0.05, lfc=1.5)
summary(results)
View(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
results <- topTreat(fit, adjust.method="BH", p.value=0.05, lfc=1.5)
summary(results)
View(results)
results <- topTreat(fit, adjust.method="BH", p.value=0.05, lfc=1.5, number=nrow(fit))
View(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
results <- topTreat(fit, adjust.method="BH", p.value=0.05, lfc=1.5, number=nrow(fit))
summary(results)
View(results)
# your code here
library(limma)
gene_exp <- read.table("GBM_expression_data.txt")
log_gene_exp <- log(gene_exp)
fit <- lmFit(log_gene_exp)
fit <- eBayes(fit)
diff_genes <- topTable(fit, p.value = 0.05, lfc = 1.5, number = 12042)
# your final answer here
print(paste("There are", nrow(diff_genes), "differentially expressed genes between GBM and normal controls."))
# your code here
gbm_data <- read.delim("~/Downloads/GBM_expression_data.txt", header=FALSE)
design = cbind(Grp1 = 1, Grp2vs1 = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1))
dim(design)
gbm_data = gbm_data[2:71]
y = slice_tail(gbm_data, n = 12042)
dim(y)
df2 <- mutate_all(y, function(x) as.numeric(as.character(x)))
dim(df2)
fit = lmFit(df2, design)
fit
ebays = eBayes(fit)
ebays
x = topTable(ebays, coef = "Grp2vs1", adjust = "BH")
dim(x)
dim(ebays)
ebays = treat(ebays, lfc = 1.5)
topTreat(ebays, coef = 2)
count = ebays$p.value <= 0.05
a = table(count)
a - 12042
# your final answer here
#There are 707 genes that are differentiated.
design <- model.matrix(~0+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit, adjust.method="BH", p.value=0.05
exit()
results <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary(results)
design <- model.matrix(~0+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary(results)
design <- model.matrix(~+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary(results)
View(design)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary(results)
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
fit <- treat(fit, lfc=1.5)
results <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary(results)
exp <- read.table("/Users/hrzhang/Downloads/GBM_expression_data.txt")
sample <- factor(c(rep(1, 60), rep(2, 10)))
design <- model.matrix(~1+sample)
fit <- lmFit(exp, design)
fit <- eBayes(fit, trend=TRUE, robust=TRUE)
results <- topTreat(fit, adjust.method="BH", p.value=0.05)
summary(results)
View(results)
# your code here
GBM_expression_data <- read.delim("~/Downloads/GBM_expression_data.txt", header=FALSE)
#This is our design matrix so we know which ones are normal controls
design <- cbind(Grp1=1, Grp2vs1=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1))
#The next three lines reformats the list to numeric
GBM_expression_data <- GBM_expression_data[2:71]
GBM_expression_data <- slice_tail(GBM_expression_data, n = 12042)
GBM_expression_data <- mutate_all(GBM_expression_data, function(x) as.numeric(as.character(x)))
#We fit the linear model then use ebayes to do empirical bayes statistics
fitLm <- lmFit(GBM_expression_data, design)
fitB <- eBayes(fitLm)
#Then we treat the data to get logFC > 1.5 and FDR <= 0.05
fit2 <- treat(fitB, lfc=1.5)
tab2 <- topTreat(fit2, coef=2)
keep <- fit2$p.value < 0.05
# your final answer here
#Now we count how many are TRUE
table(keep)["TRUE"]-dim(keep)[1]
#There are 707 genes that are differentially expressed between GBM and normal controls
fit2$p.value < 0.05
tab <-fit2$p.value < 0.05
tabe(table(keep)["TRUE"])
tabel(table(keep)["TRUE"])
table(keep)["TRUE"])
table(keep)["TRUE"]
table(keep)
keep
sum(keep[, 2])
results$p.value < 0.05
fit$p.value < 0.05
sum((fit$p.value < 0.05)[, 2])
View(GBM_expression_data)
View(gene_exp)
setwd("~/Desktop/compbio/week4")
load(file='tissuesGeneExpression.rda')
exp <- data.frame(t(e))
# KMeans
set.seed(1)
# first 2 gene
km_1 <- kmeans(exp[,1:2], centers=7)
names(km_1)
ggplot(exp, aes(X1007_s_at, X1053_at, color=tissue)) +
geom_point(size=2, pch=16)
cluster_1 <- as.character(km_1$cluster)
ggplot(exp, aes(X1007_s_at, X1053_at, color=cluster_1)) +
geom_point(size=2, pch=16)
table(true=tissue,cluster=km_1$cluster)
# all genes
km_2 <- kmeans(exp, centers=7)
table(true=tissue,cluster=km_2$cluster)
d <- dist(exp)
mds <- cmdscale(d)
exp <- data.frame(t(e))
View(exp)
View(exp)
# first 2 gene
km_1 <- kmeans(exp[,1:2], centers=7)
names(km_1)
cluster_1 <- as.character(km_1$cluster)
ggplot(exp, aes(X1007_s_at, X1053_at, color=cluster_1)) +
geom_point(size=2, pch=16)
ggplot(exp, aes(X1007_s_at, X1053_at, color=tissue)) +
geom_point(size=2, pch=16)
# all genes
km_2 <- kmeans(exp, centers=7)
table(true=tissue,cluster=km_2$cluster)
d <- dist(exp)
mds <- cmdscale(d)
distance <- data.frame(X=mds[,1],
Y=mds[,2])
ggplot(distance, aes(X, Y, color=tissue)) +
geom_point(size=2, pch=16)
# hierarchical clustering
hc <- hclust(d)
hc
plot(hc, labels=tissue, cex=0.5)
hcluster_h <- cutree(hc, h=120)
table(true=tissue, cluster=hcluster_h)
hcluster_k <- cutree(hc, k=7)
# counts_semisyn <- read.csv("/Volumes/Conerstone/SGE/semisyn.counts.csv.gz", row.names=1, check.names=F, stringsAsFactors=FALSE)
counts_semisyn <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/semisyn_k3.csv", row.names=1, check.names=F, stringsAsFactors=FALSE)
View(counts_semisyn)
melanoma_counts <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/ST_mel1_rep2_counts.tsv")
View(melanoma_counts)
melanoma_counts <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/ST_mel1_rep2_counts.tsv", sep = '\t', header = TRUE)
View(melanoma_counts)
semisyn_obs = data.matrix(counts_semisyn)
dim(semisyn_obs)
dim(data.matrix(semisyn_obs))
semisyn_obs = data.matrix(melanoma_counts)
dim(semisyn_obs)
dim(data.matrix(semisyn_obs))
counts <- cleanCounts(counts = semisyn_obs,
min.lib.size = 100,
min.reads = 1,
min.detected = 1)
library(STdeconvolve)
counts <- cleanCounts(counts = semisyn_obs,
min.lib.size = 100,
min.reads = 1,
min.detected = 1)
corpus <- restrictCorpus(counts,
removeAbove=1,
removeBelow = 0.05,
alpha = 0.05,
plot = TRUE,
verbose = TRUE)
melanoma_obs = data.matrix(melanoma_counts)
dim(semisyn_obs)
dim(data.matrix(semisyn_obs))
counts <- cleanCounts(counts = semisyn_obs,
min.lib.size = 100,
min.reads = 1,
min.detected = 1)
corpus <- restrictCorpus(counts,
removeAbove=1,
removeBelow = 0.05,
alpha = 0.05,
plot = TRUE,
verbose = TRUE)
View(melanoma_counts)
View(counts_semisyn)
View(melanoma_counts)
melanoma_counts <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/ST_mel1_rep2_counts.tsv", sep = '\t', check.names=F)
View(melanoma_counts)
melanoma_counts <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/ST_mel1_rep2_counts.tsv", sep = '\t')
View(melanoma_counts)
melanoma_counts <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/ST_mel1_rep2_counts.tsv", sep = '\t', header=TRUE)
View(melanoma_counts)
melanoma_counts <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/ST_mel1_rep2_counts-1.tsv", sep = '\t', header=TRUE)
View(melanoma_counts)
melanoma_counts <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/ST_mel1_rep2_counts-1.tsv", sep = '\t', row.names=1, header=TRUE)
View(melanoma_counts)
melanoma_obs = data.matrix(melanoma_counts)
dim(semisyn_obs)
counts <- cleanCounts(counts = melanoma_obs,
min.lib.size = 100,
min.reads = 1,
min.detected = 1)
corpus <- restrictCorpus(counts,
removeAbove=1,
removeBelow = 0.05,
alpha = 0.05,
plot = TRUE,
verbose = TRUE)
# corpus@Dimnames[1]
# write.csv(corpus@Dimnames[1], '/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/stdeconvolve_genes.csv')
ldas <- fitLDA(t(as.matrix(corpus)), Ks = seq(2, 12, by = 1),perc.rare.thresh = 0.05, plot=TRUE, verbose=TRUE)
ldas$kneedOptK
ldas$minOptK
ldas$ctPropOptK
optLDA <- optimalModel(models = ldas, opt = 'kneed')
optLDA@k
results <- getBetaTheta(optLDA, corpus = t(as.matrix(corpus)))
deconProp <- results$theta
write.csv(deconProp, '/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/stdeconvolve_melanoma_fit.csv')
data(mOB)
mOB$pos
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv")
View(pos)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F)
View(mOB)
View(pos)
View(pos)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F)
View(pos)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, nrows=2)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, nrows=2)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=FALSE, nrows=2)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=TRUE, nrows=2)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, stringsAsFactors=FALSE)
View(pos)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, stringsAsFactors=FALSE)
View(pos)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, col.names = 0)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, col.names=1)
pos <- read.csv("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, col.names=c('x', 'y'))
View(pos)
View(melanoma_counts)
pos <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F, col.names=c('x', 'y'))
pos <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", check.names=F)
View(pos)
pos <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", sep=',')
View(pos)
vizAllTopics(deconProp, pos,
groups = annot,
group_cols = rainbow(length(levels(annot))),
r=0.4)
vizAllTopics(deconProp, pos,
group_cols = rainbow(length(levels(annot))),
r=0.4)
vizAllTopics(deconProp, pos,
group_cols = rainbow(4),
r=0.4)
pos <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", sep=',', col.names = c('x', 'y'))
vizAllTopics(deconProp, pos,
group_cols = rainbow(4),
r=0.4)
mOB$pos
View(deconProp)
counts <- cleanCounts(counts = melanoma_obs,
min.lib.size = 100,
min.reads = 0,
min.detected = 0)
View(counts)
View(melanoma_obs)
dim(melanoma_obs)
counts <- cleanCounts(counts = melanoma_obs,
min.lib.size = 100,
min.reads = 0,
min.detected = 0)
counts@Dimnames
counts@Dimnames[[2]]
melanoma_obs[[2]]
melanoma_obs
colnames(melanoma_obs)
counts@Dimnames[[2]]
pos[243]
pos[143]
pos[143,]
pos[142,]
pos_adjust <- pos[-142,]
vizAllTopics(deconProp, pos_adjust,
group_cols = rainbow(4),
r=0.4)
vizAllTopics(deconProp, pos_adjust)
View(deconProp)
rownames(pos_adjust) = rownames(deconProp)
vizAllTopics(deconProp, pos_adjust)
pos <- read.table("/Users/hrzhang/Documents/projects/SpatialTranscriptomics/SGE/python/melanoma_2_pos.csv", sep=',', col.names = c('x', 'y'))
pos_adjust <- pos[-142,]
rownames(pos_adjust) = rownames(deconProp)
vizAllTopics(deconProp, pos_adjust)
mOB$annot
